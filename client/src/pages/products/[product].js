/* eslint-disable react/no-array-index-key */
/* eslint-disable no-unused-vars */
/* eslint-disable no-underscore-dangle */
import axios from 'axios';
import Head from 'next/head';
import Image from 'next/image';
import { useRouter } from 'next/router';
import { useContext, useEffect, useState } from 'react';
import { FaCheckDouble, FaChevronLeft, FaChevronRight } from 'react-icons/fa';
import Swal from 'sweetalert2';
import Footer from '../../../Components/Footer/Footer';
import Navbar from '../../../Components/Navbar/Navbar';
import { CartContext } from '../../../Context/CardContext';
import styles from '../../styles/productdetail.module.scss';

function ProductDetail({ product }) {
    const [sliderNum, setSliderNum] = useState(0);
    const [quantity, setQuantity] = useState(1);
    const [cartItem, setCartItem] = useState([]);
    // const [onCart, setOnCart] = useState(false);
    const router = useRouter();

    const { state, dispatch } = useContext(CartContext);

    // find the product from localstorage and check if it exists
    useEffect(() => {
        const items =
            typeof window !== 'undefined' && JSON.parse(localStorage.getItem('productlist'));
        setCartItem(items);
    }, []);

    // check if the product is already in cart
    const isTrueFalse = cartItem.find((pr) => pr._id === product._id);

    // slide between products images
    const lastImg = product.images && product.images.length - 1;
    const handleClick = (e) => {
        let newSliderNum;
        if (e === 'inc') {
            newSliderNum = sliderNum === 0 ? lastImg : sliderNum - 1;
        } else {
            newSliderNum = sliderNum === lastImg ? 0 : sliderNum + 1;
        }

        setSliderNum(newSliderNum);
    };

    const Toast = Swal.mixin({
        toast: true,
        position: 'bottom-end',
        showConfirmButton: false,
        width: '15rem',
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer);
            toast.addEventListener('mouseleave', Swal.resumeTimer);
        },
    });

    const addToCart = () => {
        const date = new Date().getMilliseconds();
        const mainProduct = {
            ...product,
            id: `${product._id}-${date}`,
            quantity,
        };

        try {
            dispatch({ type: 'ADD_TO_LIST', payload: mainProduct });

            Toast.fire({
                icon: 'success',
                title: 'Added to Cart',
            });

            router.push('/cart');
        } catch (error) {
            console.log(error);
        }
    };
    return (
        <div className={styles.product_detail_page}>
            <Head>
                <title>{product.title && product.title}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Navbar />
            <div className={styles.product_detail_page}>
                <div className={styles.detail_page_left}>
                    <div className={styles.detail_page_slider}>
                        <div className={styles.slider_main}>
                            <Image
                                src={product?.images[sliderNum]}
                                width={500}
                                height={500}
                                alt="product img"
                                className={styles.slider_main_imgg}
                            />

                            <div className={styles.slider_btnss}>
                                <FaChevronLeft
                                    size={35}
                                    className={styles.slide_icon}
                                    onClick={() => handleClick('inc')}
                                />
                                <FaChevronRight
                                    size={35}
                                    className={styles.slide_icon}
                                    onClick={() => handleClick('dec')}
                                />
                            </div>
                        </div>

                        <div className={styles.slider_btm_imgs}>
                            {product.images?.map((img, i) => (
                                <Image
                                    key={i}
                                    src={img}
                                    onClick={() => setSliderNum(i)}
                                    alt="product img"
                                    className={styles.slider_btm_img}
                                    height={50}
                                    width={70}
                                />
                            ))}
                        </div>
                    </div>

                    <div className={styles.res_priceee}>
                        <h2 className={styles.product_title}>{product.title}</h2>
                        <h2 className={styles.product_price}>USD {product.price}</h2>
                        <span style={{ fontSize: '14px', color: 'rgb(66, 65, 65)' }}>
                            Local taxes included (where applicable)
                        </span>
                        <p style={{ color: 'black', marginTop: '40px' }}>Quantity</p>
                        {/* <input type="number" value={quantity} min={1} max={20} onChange={(e) => setQuantity(e.target.value)} className={styles.product_quantity}/> */}
                        <select
                            value={quantity}
                            onChange={(e) => setQuantity(e.target.value)}
                            className={styles.product_quantity2}
                        >
                            <option value="1">1</option>
                            <option value="2">2</option>
                            <option value="3">3</option>
                            <option value="4">4</option>
                            <option value="5">5</option>
                            <option value="6">6</option>
                            <option value="7">7</option>
                            <option value="8">8</option>
                            <option value="9">9</option>
                            <option value="10">10</option>
                        </select>

                        <button
                            onClick={addToCart}
                            type="button"
                            disabled={isTrueFalse}
                            style={{ cursor: isTrueFalse ? 'not-allowed' : 'pointer' }}
                        >
                            {isTrueFalse ? 'Added to Cart' : 'Add to Cart'}
                        </button>

                        <div className={styles.highlight}>
                            <h3>Highlights</h3>
                            {product.highlights.map((highlight, i) => (
                                <p key={i}>
                                    <FaCheckDouble style={{ marginRight: '5px' }} size={15} />{' '}
                                    {highlight}
                                </p>
                            ))}
                        </div>
                    </div>

                    {product.detail.map((detail, i) => (
                        <p key={i} className={styles.detail_secs}>
                            {detail}
                        </p>
                    ))}
                </div>

                <div className={styles.detail_page_right}>
                    <h2 className={styles.product_title}>{product.title}</h2>
                    <h2 className={styles.product_price}>USD {product.price}</h2>
                    <span style={{ fontSize: '14px', color: 'rgb(66, 65, 65)' }}>
                        Local taxes included (where applicable)
                    </span>
                    <p style={{ color: 'black', marginTop: '40px' }}>Quantity</p>

                    {/* <input type="number" value={quantity} min={1} max={20} onChange={(e) => setQuantity(e.target.value)} className={styles.product_quantity}/> */}
                    <select
                        value={quantity}
                        onChange={(e) => setQuantity(e.target.value)}
                        className={styles.product_quantity2}
                    >
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                        <option value="6">6</option>
                        <option value="7">7</option>
                        <option value="8">8</option>
                        <option value="9">9</option>
                        <option value="10">10</option>
                    </select>

                    <button
                        onClick={addToCart}
                        type="button"
                        disabled={isTrueFalse}
                        style={{ cursor: isTrueFalse ? 'not-allowed' : 'pointer' }}
                    >
                        {isTrueFalse ? 'Added to Cart' : 'Add to Cart'}
                    </button>

                    <div className={styles.highlight}>
                        <h3>Highlights</h3>
                        {product.highlights.map((highlight, i) => (
                            <p key={i}>
                                <FaCheckDouble style={{ marginRight: '5px' }} size={15} />{' '}
                                {highlight}
                            </p>
                        ))}
                    </div>
                </div>
            </div>
            <Footer />
        </div>
    );
}

export default ProductDetail;

export async function getStaticPaths() {
    let data;
    try {
        const res = await axios.get(`https://lucianaschiles-backend.onrender.com/api/products/all`);
        data = await res.data.message;
    } catch (error) {
        console.log(error);
    }

    const paths = data.map((product) => ({
        params: {
            product: product._id,
        },
    }));

    return {
        paths,
        fallback: false,
    };
}

export async function getStaticProps(context) {
    let data;
    try {
        const { params } = context;
        const res = await axios.get(
            `https://lucianaschiles-backend.onrender.com/api/products/${params.product}`
        );

        data = await res.data.message;
    } catch (error) {
        console.log(error);
    }

    return {
        props: {
            product: data || null,
        },
    };
}
